const { DateTime } = require('luxon');
const fs = require('fs');
const { getSettings } = require('../../Database/config');

module.exports = {
  name: 'fullmenu',
  aliases: ['allmenu', 'commandslist'],
  description: 'Displays the full bot command menu by category',
  run: async (context) => {
    const { client, m, totalCommands, mode, pict, botname } = context;

    // Handle invalid input
    if (context.text) {
      try {
        await client.sendMessage(m.chat, { text: `‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ú¶ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n‚îÇ‚ùí Please use *${context.prefix}fullmenu* without extra text. Let's keep it simple! üòä` }, { quoted: m });
      } catch (error) {
        console.error(`[DEBUG] Error sending invalid input message: ${error.message}`);
      }
      return;
    }

    try {
      // Retrieve settings to get the current prefix
      const settings = await getSettings();
      if (!settings) {
        console.error('Failed to load settings');
        try {
          await client.sendMessage(m.chat, { text: `‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ú¶ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n‚îÇ‚ùí Oops, couldn't load settings. Try again later!` }, { quoted: m });
        } catch (error) {
          console.error(`[DEBUG] Error sending settings error message: ${error.message}`);
        }
        return;
      }

      const effectivePrefix = settings.prefix || ''; // Use empty string for prefixless mode

      const categories = [
        { name: 'General', display: 'G“Ω…≥“Ω…æŒ± Ö', emoji: 'üìú' },
        { name: 'Settings', display: 'S“Ω∆ö∆öŒπ…≥…† Ç', emoji: 'üõ†Ô∏è' },
        { name: 'Owner', display: 'O…Ø…≥“Ω…æ', emoji: 'üëë' },
        { name: 'Heroku', display: 'H“Ω…æœÉ∆ôœÖ', emoji: '‚òÅÔ∏è' },
        { name: 'Wa-Privacy', display: 'WŒ±-P…æŒπ ãŒ±∆à·Éß', emoji: 'üîí' },
        { name: 'Groups', display: 'G…æœÉœÖœÅ Ç', emoji: 'üë•' },
        { name: 'AI', display: 'AI', emoji: 'üß†' },
        { name: 'Media', display: 'M“Ω‘ÉŒπŒ±', emoji: 'üé¨' },
        { name: 'Editting', display: 'E‘ÉŒπ∆ö∆öŒπ…≥…†', emoji: '‚úÇÔ∏è' },
        { name: 'Logo', display: 'LœÉ…†œÉ', emoji: 'üé®' },
        { name: '+18', display: '+18', emoji: 'üîû' },
        { name: 'Utils', display: 'U∆öŒπ Ö Ç', emoji: 'üîß' }
      ];

      const getGreeting = () => {
        const currentHour = DateTime.now().setZone('Africa/Nairobi').hour;
        if (currentHour >= 5 && currentHour < 12) return 'Good Morning, early riser! üåû';
        if (currentHour >= 12 && currentHour < 18) return 'Good Afternoon, sunshine! üåû';
        if (currentHour >= 18 && currentHour < 22) return 'Good Evening, star gazer! üåô';
        return 'Good Night, moon chaser! üåå';
      };

      const getCurrentTimeInNairobi = () => {
        return DateTime.now().setZone('Africa/Nairobi').toLocaleString(DateTime.TIME_SIMPLE);
      };

      const toFancyFont = (text, isUpperCase = false) => {
        const fonts = {
          'A': 'ùòº', 'B': 'ùòΩ', 'C': 'ùòæ', 'D': 'ùôø', 'E': 'ùôÄ', 'F': 'ùôÅ', 'G': 'ùôÇ', 'H': 'ùôÉ', 'I': 'ùôÑ', 'J': 'ùôÖ', 'K': 'ùôÜ', 'L': 'ùôá', 'M': 'ùôà',
          'N': 'ùôâ', 'O': 'ùôä', 'P': 'ùôã', 'Q': 'ùôå', 'R': 'ùôç', 'S': 'ùôé', 'T': 'ùôè', 'U': 'ùôê', 'V': 'ùôë', 'W': 'ùôí', 'X': 'ùôì', 'Y': 'ùôî', 'Z': 'ùôï',
          'a': 'ùôñ', 'b': 'ùôó', 'c': 'ùôò', 'd': 'ùôô', 'e': 'ùôö', 'f': 'ùôõ', 'g': 'ùôú', 'h': 'ùôù', 'i': 'ùôû', 'j': 'ùôü', 'k': 'ùô†', 'l': 'ùô°', 'm': 'ùô¢',
          'n': 'ùô£', 'o': 'ùô§', 'p': 'ùô•', 'q': 'ùô¶', 'r': 'ùôß', 's': 'ùô®', 't': 'ùô©', 'u': 'ùô™', 'v': 'ùô´', 'w': 'ùô¨', 'x': 'ùô≠', 'y': 'ùôÆ', 'z': 'ùôØ'
        };
        return (isUpperCase ? text.toUpperCase() : text.toLowerCase())
          .split('')
          .map(char => fonts[char] || char)
          .join('');
      };

      let menuText = `‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ú¶ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n‚îÇ‚òÜ *Welcome to ${toFancyFont(botname)}!* ‚ò¢\n\n`;
      menuText += `${getGreeting()} ${m.pushName}\n\n`;
      menuText += `üë§ *U Ç“Ω…æ*: ${m.pushName}\n`;
      menuText += `ü§ñ *BœÉ∆ö*: ${toFancyFont(botname)}\n`;
      menuText += `üìã *TœÉ∆öŒ± Ö CœÉ…±…±Œ±…≥‘É Ç*: ${totalCommands}\n`;
      menuText += `üïí *TŒπ…±“Ω*: ${getCurrentTimeInNairobi()}\n`;
      menuText += `üî£ *P…æ“ΩœùŒπx*: ${effectivePrefix || 'None'}\n`;
      menuText += `üåê *MœÉ‘É“Ω*: ${mode}\n`;
      menuText += `üìö *LŒπ·Ç¶…æŒ±…æ·Éß*: Baileys\n`;
      menuText += `\n‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ú¶ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n\n`;

      menuText += `*üìñ Codex of Commands ‚ú¶*\n`;

      let commandCount = 0;
      for (const category of categories) {
        let commandFiles;
        try {
          commandFiles = fs.readdirSync(`./Cmds/${category.name}`).filter(file => file.endsWith('.js'));
          console.log(`[DEBUG] Category ${category.name}: Found ${commandFiles.length} command files`);
        } catch (error) {
          console.error(`[DEBUG] Error reading directory ./Cmds/${category.name}: ${error.message}`);
          commandFiles = [];
        }

        if (commandFiles.length === 0 && category.name !== '+18') continue;

        menuText += `\n‚ú¶‚îÅ „Ää${category.display} ${category.emoji}„Äã ‚îÅ‚ú¶\n`;

        if (category.name === '+18') {
          const plus18Commands = ['xvideo'];
          for (const cmd of plus18Commands) {
            const fancyCommandName = toFancyFont(cmd);
            menuText += `  ‚û§ *${fancyCommandName}*\n`;
            commandCount++;
          }
        }

        for (const file of commandFiles) {
          const commandName = file.replace('.js', '');
          const fancyCommandName = toFancyFont(commandName);
          menuText += `  ‚û§ *${fancyCommandName}*\n`;
          commandCount++;
        }
      }

      menuText += `\n‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ú¶ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n`;
      menuText += `*Unleash the power of ${toFancyFont(botname)}! ‚òÜ*\n`;
      menuText += `Powered by Toxic-MD\n`;
      menuText += `‚ù¶ ‚ú¶ ‚òÜ ‚ò¢ ‚úß\n`;

      // Debug: Log menuText length and preview
      console.log(`[DEBUG] menuText length: ${menuText.length} characters`);
      console.log(`[DEBUG] menuText preview: ${menuText.substring(0, 200)}...`);
      console.log(`[DEBUG] Total commands added: ${commandCount}`);
      console.log(`[DEBUG] Sending to chat: ${m.chat}`);

      // Send the message
      try {
        await client.sendMessage(m.chat, {
          text: menuText,
          footer: `Powered by Toxic-MD`,
          buttons: [
            { buttonId: `${effectivePrefix}repo`, buttonText: { displayText: `üìú ${toFancyFont('REPOSITORY')}` }, type: 1 }
          ],
          headerType: 1,
          contextInfo: {
            externalAdReply: {
              showAdAttribution: false,
              title: `${botname} Repository`,
              body: `Explore the source of ${botname}!`,
              thumbnail: pict,
              sourceUrl: `https://github.com/xhclintohn/Toxic-MD`,
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        }, { quoted: m });
        console.log(`[DEBUG] Menu sent successfully to ${m.chat}`);
      } catch (error) {
        console.error(`[DEBUG] Error sending menu: ${error.message}`);
        try {
          await client.sendMessage(m.chat, { text: `‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ú¶ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n‚îÇ‚ùí Sorry, couldn't send the menu. Try again later!\n\nPowered by Toxic-MD` }, { quoted: m });
        } catch (fallbackError) {
          console.error(`[DEBUG] Error sending fallback message: ${fallbackError.message}`);
        }
      }

    } catch (error) {
      console.error('Error generating full menu:', error);
      try {
        await client.sendMessage(m.chat, { text: `‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚ú¶ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n‚îÇ‚ùí Sorry, something went wrong with the menu. Try again later!\n\nPowered by Toxic-MD` }, { quoted: m });
      } catch (fallbackError) {
        console.error(`[DEBUG] Error sending error message: ${fallbackError.message}`);
      }
    }
  }
};